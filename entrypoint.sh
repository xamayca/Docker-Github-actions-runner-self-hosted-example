#!/bin/bash

# D√©finit les labels du runner GitHub Actions auto-h√©berg√©
export GITHUB_RUNNER_LABELS="x64,linux"

# D√©finit le r√©pertoire de travail du runner GitHub Actions auto-h√©berg√©
export GITHUB_RUNNER_WORKDIR="workdir-runner"

# V√©rifie que les variables d'environnement requises sont d√©finies et les exporte
for variable in GITHUB_REPOSITORY_OWNER GITHUB_REPOSITORY_NAME GITHUB_PERSONAL_TOKEN; do
  if [ -z "${!variable}" ]; then
    echo "‚ö†Ô∏è $variable est manquante ou vide ! Veuillez la d√©finir dans .env √† la racine de votre projet."
    exit 1
  fi
  export "${variable}"="${!variable}"
done

echo "üöÄ Demande d‚Äôun jeton pour le runner auto-h√©berg√© GitHub Actions sur https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}..."

# Requ√™te l'API GitHub pour obtenir le jeton d'enregistrement du runner auto-h√©berg√© GitHub Actions
# https://docs.github.com/fr/rest/actions/self-hosted-runners?apiVersion=2022-11-28#create-a-registration-token-for-a-repository
REQUEST=$(curl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer ${GITHUB_PERSONAL_TOKEN}" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/"${GITHUB_REPOSITORY_OWNER}"/"${GITHUB_REPOSITORY_NAME}"/actions/runners/registration-token)

echo "üîë Extraction du jeton d'enregistrement avec JQ depuis la r√©ponse de l'API GitHub..."

# Extrait le jeton d'enregistrement depuis la r√©ponse de l'API avec jq et l'exporte comme variable d'environnement
GITHUB_RUNNER_TOKEN=$(echo "${REQUEST}" | jq --raw-output .token)

echo "üìÅ Cr√©ation du r√©pertoire de travail pour le runner auto-h√©berg√© GitHub Actions..."
# Cr√©e le r√©pertoire de travail du runner auto-h√©berg√© GitHub Actions dans le r√©pertoire personnel de l'utilisateur
mkdir -p "${HOME}/${GITHUB_RUNNER_WORKDIR}"

echo "üîê Attribution des permissions sur le r√©pertoire de travail..."
# Applique les permissions en lecture, √©criture et ex√©cution pour le propri√©taire, et lecture/ex√©cution pour les autres
chmod 755 "${HOME}/${GITHUB_RUNNER_WORKDIR}"

echo "‚öôÔ∏è Configuration du runner auto-h√©berg√© GitHub Actions avec des param√®tres personnalis√©s..."

# Ex√©cution du script 'config.sh' de GitHub Actions pour configurer et installer le runner
# Pour voir les options disponibles, ex√©cutez : ./config.sh --help
./config.sh \
  --unattended \
  --url https://github.com/"${GITHUB_REPOSITORY_OWNER}"/"${GITHUB_REPOSITORY_NAME}" \
  --token "${GITHUB_RUNNER_TOKEN}" \
  --name "${GITHUB_REPOSITORY_NAME}-actions-runner" \
  --labels "${GITHUB_RUNNER_LABELS}" \
  --work "${HOME}/${GITHUB_RUNNER_WORKDIR}" \
  --replace

echo "‚ñ∂Ô∏è  D√©marrage du runner auto-h√©berg√© GitHub Actions avec les param√®tres sp√©cifi√©s..."

# Fonction de nettoyage pour d√©senregistrer le runner GitHub Actions
cleanup() {
  echo "üßπ Fonction de nettoyage appel√©e, d√©senregistrement du runner auto-h√©berg√© GitHub Actions..."
  ./config.sh remove --token "${GITHUB_RUNNER_TOKEN}"
}

# Appelle la fonction de nettoyage en cas d'interruption (Ctrl+C), de signal de terminaison ou √† la sortie du script
trap cleanup INT TERM

# Ex√©cute le script 'run.sh' de GitHub Actions en arri√®re-plan en passant tous les arguments re√ßus
./run.sh &
RUNNER_PID=$!

# Attend la fin du processus en arri√®re-plan (run.sh) avant de continuer
wait "$RUNNER_PID"